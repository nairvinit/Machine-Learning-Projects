from keras.models import Sequential
from keras.layers import Convolution2D
from keras.layers import MaxPooling2D
from keras.layers import Flatten 
from keras.layers import Dense

#Initialising CNN
classifier=Sequential()

#Adding Convolutional Layer
classifier.add(Convolution2D(32,3,3, input_shape=(64,64,3), activation='relu'))

#Adding Pooling
classifier.add(MaxPooling2D(pool_size=(2,2)))

#Adding 2nd Convolutional layer
classifier.add(Convolution2D(64,3,3, activation='relu'))
classifier.add(MaxPooling2D(pool_size=(2,2)))

#Flattening
classifier.add(Flatten())

#Full Connection for hidden layer
classifier.add(Dense(output_dim=128, activation='relu'))
classifier.add(Dense(output_dim=1, activation='sigmoid'))

#Compiling CNN
classifier.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

#Keras augmentation
from keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(
        rescale=1./255,
        shear_range=0.2,
        zoom_range=0.2,
        horizontal_flip=True)

test_datagen = ImageDataGenerator(rescale=1./255)

training_set = train_datagen.flow_from_directory(
        'training',
        target_size=(64, 64),
        batch_size=8,
        class_mode='binary')

test_set = test_datagen.flow_from_directory(
        'test',
        target_size=(64, 64),
        batch_size=8,
        class_mode='binary')

classifier.fit_generator(
        training_set,
        steps_per_epoch=170,
        epochs=25,
        validation_data=test_set,
        validation_steps=30)

#Predict new image
import numpy as np
from keras.preprocessing import image as image_utils
test_image=image_utils.load_img('sing_pred/damaged_or_good.jpg',target_size=(64,64))
test_image=image_utils.img_to_array(test_image)

test_image=np.expand_dims(test_image,axis=0)
result=classifier.predict(test_image)
training_set.class_indices
if result[0][0]==1:
    prediction='good'
else:
    prediction='damaged'
    prediction
